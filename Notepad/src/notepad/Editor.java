/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package notepad;

/**
 *
 * @author Shreyas
 */
import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.FileDialog;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import java.awt.Font;
import java.awt.datatransfer.Clipboard;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Stack;
import static javax.swing.JFileChooser.FILES_ONLY;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

public class Editor extends javax.swing.JFrame {

    /**
     * Creates new form Editor
     */
    
    
    
    public Editor() {
        Notepad.windowCount++;
        setTitle(title);
        initComponents();
        prev = new FixedStack<>(undomoves);
        fontdialog=new FontSelect(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        itemNew = new javax.swing.JMenuItem();
        itemNewWindow = new javax.swing.JMenuItem();
        itemOpen = new javax.swing.JMenuItem();
        itemSave = new javax.swing.JMenuItem();
        itemSaveAs = new javax.swing.JMenuItem();
        itemExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        itemUndo = new javax.swing.JMenuItem();
        itemCut = new javax.swing.JMenuItem();
        itemCopy = new javax.swing.JMenuItem();
        itemPaste = new javax.swing.JMenuItem();
        itemDelete = new javax.swing.JMenuItem();
        itemFind = new javax.swing.JMenuItem();
        itemFindNext = new javax.swing.JMenuItem();
        itemReplace = new javax.swing.JMenuItem();
        itemGoto = new javax.swing.JMenuItem();
        itemSelectAll = new javax.swing.JMenuItem();
        itemTime = new javax.swing.JMenuItem();
        menuFormat = new javax.swing.JMenu();
        itemFont = new javax.swing.JMenuItem();
        menuView = new javax.swing.JMenu();
        menuHelp = new javax.swing.JMenu();
        itemViewHelp = new javax.swing.JMenuItem();
        itemAbout = new javax.swing.JMenuItem();

        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        textArea.setRows(5);
        textArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textAreaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(textArea);

        menuFile.setText("File");

        itemNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        itemNew.setText("New");
        itemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNewActionPerformed(evt);
            }
        });
        menuFile.add(itemNew);

        itemNewWindow.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        itemNewWindow.setText("New Window");
        itemNewWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNewWindowActionPerformed(evt);
            }
        });
        menuFile.add(itemNewWindow);

        itemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        itemOpen.setText("Open ..");
        itemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemOpenActionPerformed(evt);
            }
        });
        menuFile.add(itemOpen);

        itemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        itemSave.setText("Save");
        itemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSaveActionPerformed(evt);
            }
        });
        menuFile.add(itemSave);

        itemSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        itemSaveAs.setText("Save As ..");
        itemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSaveAsActionPerformed(evt);
            }
        });
        menuFile.add(itemSaveAs);

        itemExit.setText("Exit");
        itemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemExitActionPerformed(evt);
            }
        });
        menuFile.add(itemExit);

        jMenuBar1.add(menuFile);

        menuEdit.setText("Edit");

        itemUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        itemUndo.setText("Undo");
        itemUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemUndoActionPerformed(evt);
            }
        });
        menuEdit.add(itemUndo);

        itemCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        itemCut.setText("Cut");
        itemCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCutActionPerformed(evt);
            }
        });
        menuEdit.add(itemCut);

        itemCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        itemCopy.setText("Copy");
        itemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCopyActionPerformed(evt);
            }
        });
        menuEdit.add(itemCopy);

        itemPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        itemPaste.setText("Paste");
        itemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemPasteActionPerformed(evt);
            }
        });
        menuEdit.add(itemPaste);

        itemDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        itemDelete.setText("Delete");
        itemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemDeleteActionPerformed(evt);
            }
        });
        menuEdit.add(itemDelete);

        itemFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        itemFind.setText("Find ..");
        itemFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemFindActionPerformed(evt);
            }
        });
        menuEdit.add(itemFind);

        itemFindNext.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        itemFindNext.setText("Find Next");
        itemFindNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemFindNextActionPerformed(evt);
            }
        });
        menuEdit.add(itemFindNext);

        itemReplace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        itemReplace.setText("Replace ..");
        itemReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemReplaceActionPerformed(evt);
            }
        });
        menuEdit.add(itemReplace);

        itemGoto.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        itemGoto.setText("Go To");
        itemGoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemGotoActionPerformed(evt);
            }
        });
        menuEdit.add(itemGoto);

        itemSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        itemSelectAll.setText("Select All");
        itemSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSelectAllActionPerformed(evt);
            }
        });
        menuEdit.add(itemSelectAll);

        itemTime.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        itemTime.setText("Time/Date");
        itemTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemTimeActionPerformed(evt);
            }
        });
        menuEdit.add(itemTime);

        jMenuBar1.add(menuEdit);

        menuFormat.setText("Format");

        itemFont.setText("Font");
        itemFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemFontActionPerformed(evt);
            }
        });
        menuFormat.add(itemFont);

        jMenuBar1.add(menuFormat);

        menuView.setText("View");
        jMenuBar1.add(menuView);

        menuHelp.setText("Help");

        itemViewHelp.setText("View Help");
        itemViewHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemViewHelpActionPerformed(evt);
            }
        });
        menuHelp.add(itemViewHelp);

        itemAbout.setText("About");
        itemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAboutActionPerformed(evt);
            }
        });
        menuHelp.add(itemAbout);

        jMenuBar1.add(menuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(546, 574));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void textAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyPressed
        change=true;
        if (evt.getKeyCode()==KeyEvent.VK_SPACE||evt.getKeyCode()==KeyEvent.VK_ENTER) {
            prev.push(textArea.getText());
        }
        setTitle(title+"*");
    }//GEN-LAST:event_textAreaKeyPressed

    private void itemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNewActionPerformed
        // TODO add your handling code here:
        if (change) {
            int option=JOptionPane.showConfirmDialog(null,"Do you want to save changes to "+title);
            if (option==0) {
                // Yes
                if (title.equals(defaultTitle)) {
                    saveAs();
                }
                else {
                    save();
                }
                title=defaultTitle;
                setTitle(title);
                textArea.setText("");
            }
            else if (option==1) {
                // No
                title=defaultTitle;
                setTitle(title);
                textArea.setText("");
            }
        }
        else {
            title=defaultTitle;
            setTitle(title);
            textArea.setText("");
        }
    }//GEN-LAST:event_itemNewActionPerformed

    private void itemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemOpenActionPerformed
        // TODO add your handling code here:
        openFile();
    }//GEN-LAST:event_itemOpenActionPerformed

    private void itemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSaveActionPerformed
        // TODO add your handling code here:
        if (title.equals(defaultTitle)) {
            saveAs();
        }
        else {
            save();
        }
    }//GEN-LAST:event_itemSaveActionPerformed

    private void itemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSaveAsActionPerformed
        // TODO add your handling code here:
        saveAs();
    }//GEN-LAST:event_itemSaveAsActionPerformed

    private void itemNewWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNewWindowActionPerformed
        // TODO add your handling code here:
        new Editor().setVisible(true);
    }//GEN-LAST:event_itemNewWindowActionPerformed

    private void itemUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemUndoActionPerformed
        // TODO add your handling code here:
        if (prev.size()<=0)
            return;
        String txt=prev.pop();
        textArea.setText(txt);
        change=true;
    }//GEN-LAST:event_itemUndoActionPerformed

    private void itemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemExitActionPerformed
        // TODO add your handling code here:
        if (change) {
            int option=JOptionPane.showConfirmDialog(null,"Do you want to save changes to "+title);
            if (option==0) {
                // Yes
                if (title.equals(defaultTitle)) {
                    saveAs();
                }
                else {
                    save();
                }
                exit();
            }
            else if (option==1) {
                exit();
            }
        }
        else {
            exit();
        }
    }//GEN-LAST:event_itemExitActionPerformed

    private void itemFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemFindActionPerformed
        // TODO add your handling code here:
        find(0,true,false); // start from begining find an new word and don't consider case sensitive
    }//GEN-LAST:event_itemFindActionPerformed

    private void itemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCopyActionPerformed
        // TODO add your handling code here:
        clipboard=textArea.getSelectedText();
    }//GEN-LAST:event_itemCopyActionPerformed

    private void itemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemDeleteActionPerformed
        // TODO add your handling code here:
        prev.push(textArea.getText());
        textArea.replaceSelection("");
    }//GEN-LAST:event_itemDeleteActionPerformed

    private void itemCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCutActionPerformed
        // TODO add your handling code here:
        prev.push(textArea.getText());
        clipboard=textArea.getSelectedText();
        textArea.replaceSelection("");
    }//GEN-LAST:event_itemCutActionPerformed

    private void itemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemPasteActionPerformed
        // TODO add your handling code here:
        prev.push(textArea.getText());
        textArea.insert(clipboard,textArea.getCaretPosition());
    }//GEN-LAST:event_itemPasteActionPerformed

    private void itemSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSelectAllActionPerformed
        // TODO add your handling code here:
        textArea.selectAll();
    }//GEN-LAST:event_itemSelectAllActionPerformed

    private void itemFindNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemFindNextActionPerformed
        // TODO add your handling code here:
        find(start+1,false,false); // continue from before and its not a new word and don't consider case sensitive
    }//GEN-LAST:event_itemFindNextActionPerformed

    private void itemReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemReplaceActionPerformed
        // TODO add your handling code here:
        callReplaceDialog();
    }//GEN-LAST:event_itemReplaceActionPerformed

    private void itemGotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemGotoActionPerformed
        // TODO add your handling code here:
        String tmp=JOptionPane.showInputDialog("Go to Line no.");
        try {
            int line=Integer.valueOf(tmp);
            String data=textArea.getText();
            int len=data.length();
            int cnt=1;
            int i;
            for (i=0;i<len;i++) {
                char c=data.charAt(i);
                if (cnt==line)
                    break;
                if (c=='\n')
                    cnt++;
            }
            System.out.println(cnt);
            textArea.setCaretPosition(i);
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null,"Wrong Input");
        }
    }//GEN-LAST:event_itemGotoActionPerformed

    private void itemTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemTimeActionPerformed
        // TODO add your handling code here:
        prev.push(textArea.getText());
        textArea.insert(time(),textArea.getCaretPosition());
    }//GEN-LAST:event_itemTimeActionPerformed

    private void itemFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemFontActionPerformed
        // TODO add your handling code here:
        callFontSelectDialog();
    }//GEN-LAST:event_itemFontActionPerformed

    private void itemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAboutActionPerformed
        // TODO add your handling code here:
        try {
            File infoPage = new File(getClass().getResource("/Webpage/index.html").getFile());
            String path=infoPage.toString();
            if (path.indexOf('.')!=path.lastIndexOf('.')) {
                // .jar file
                int a=path.indexOf('.');
                String name="Notepad";
                path=path.substring(0,a-name.length())+"index.html";
            }
            //String path="C:\\Users\\ssony\\Documents\\NetBeansProjects\\Notepad\\src\\Webpage\\index.html";
            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler "+path);
        }
        catch (IOException e) {
            JOptionPane.showMessageDialog(null,"Error opening");
        }
    }//GEN-LAST:event_itemAboutActionPerformed

    private void itemViewHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemViewHelpActionPerformed
        // TODO add your handling code here:
        new About(this).setVisible(true);
    }//GEN-LAST:event_itemViewHelpActionPerformed
    
    private void saveAs() {
        FileDialog fd = new FileDialog(Editor.this,"Save",FileDialog.SAVE);
        fd.show();
        if (fd.getFile()!=null) {
            title=fd.getFile();
            dir=fd.getDirectory();
            file=dir+title;
            if (file.indexOf('.')==-1) {
                file=file+".txt";
                title=title+".txt";
            }
            textArea.requestFocus();
            save();
        }
    }
    
    private void save() {
        setTitle(title);
        try
        {
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter p = new PrintWriter(bw);
            String data[]=textArea.getText().split("\n");
            for (String data1 : data) {
                p.println(data1);
            }
            p.flush();
            fw.close();
        }
        catch (Exception e)
        {
            System.out.println("Writing error");
        } 
        change=false;
    }
    
    private void openFile() {
        try{
            JFileChooser fileChooser = new JFileChooser("C:\\Users\\ssony\\Desktop");
            fileChooser.setFileSelectionMode(FILES_ONLY);
            fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("txt", "txt"));
            fileChooser.setAcceptAllFileFilterUsed(true);
            int re = fileChooser.showOpenDialog(this);
            
            if(re == JFileChooser.APPROVE_OPTION){
                File openFile = fileChooser.getSelectedFile();
                FileReader fr = new FileReader(openFile);
                BufferedReader br = new BufferedReader(fr);
                String tmp=openFile.toString();
                int index=tmp.lastIndexOf('\\');
                title=tmp.substring(index+1);
                dir=tmp.substring(0,index+1);
                file=dir+title;
                setTitle(title);
                textArea.read(br, null);
                br.close();
                autoInsertTime();
            }
        }
        catch(Exception e){
            
        } 
    }
    
    private void find(int startIndex,boolean newWord,boolean caseSensitive) {
        if (newWord)
            findText=JOptionPane.showInputDialog("Find");
        if (findText.equals("")) {
            JOptionPane.showMessageDialog(null,"Enter something to Find");
            return;
        }
        String find=findText;
        String data=textArea.getText();
        if (!caseSensitive) {
            find=find.toLowerCase();
            data=data.toLowerCase();
        }
        int len=data.length();
        start=startIndex;
        end=start;
        for (int i=start;i<len;i++) {
            char c=data.charAt(i);
            if (c==find.charAt(0)) {
                start=i;
                boolean flag=true;
                for (int j=0;j<find.length();j++,i++) {
                    if (i>=len||data.charAt(i)!=find.charAt(j)) {
                        flag=false;
                        break;
                    }
                }
                if (flag) {
                    end=i;
                    break;
                }
            }
        }
        if (start>=end) {
            if (startIndex!=0) {
                find(0,false,caseSensitive);
            }
            else {
                JOptionPane.showMessageDialog(null,findText+" Not Found");
                start=textArea.getCaretPosition();
                end=start;
            }
        }
        textArea.select(start, end);
    }
    
    private void callReplaceDialog() {
        new FindReplace(this).setVisible(true);
    }
    
    public void replace(boolean all,boolean caseSensitive) {
        prev.push(textArea.getText());
        String data=textArea.getText();
        if  (!caseSensitive) {
            data=data.toLowerCase();
            findText=findText.toLowerCase();
        }
        int len=data.length();
        for (int i=0;i<len;i++) {
            char c=data.charAt(i);
            if (c==findText.charAt(0)) {
                start=i;
                boolean flag=true;
                for (int j=0;j<findText.length();j++,i++) {
                    if (i>=len||data.charAt(i)!=findText.charAt(j)) {
                        flag=false;
                        break;
                    }
                }
                if (flag) {
                    end=i;
                    textArea.select(start,end);
                    textArea.replaceSelection(replaceText);
                    data=textArea.getText();
                    len=data.length();
                    i=start+replaceText.length()-1;
                    change=true;
                    if (!all)
                        break;
                }
            }
        }
    }
    
    private void autoInsertTime() {
        if (textArea.getText().startsWith(".LOG")) {
            textArea.insert("\n"+time(),textArea.getText().length());
        }
    }
    
    private String time() {
        String DATE_FORMAT_NOW="HH:mm dd-MM-yyyy";
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW);
        change=true;
        return sdf.format(cal.getTime());
    }
    
    private void callFontSelectDialog() {
        fontdialog.setVisible(true);
    }
    
    public void setTextFont(Font font) {
        textArea.setFont(font);
        textArea.setForeground(textColor);
    }
    
    private void exit() {
        this.setVisible(false);
        Notepad.windowCount--;
        if (Notepad.windowCount<=0) {
            System.exit(0);
        }
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }

    private boolean change=false;
    private String file="";
    private String dir="";
    private final String defaultTitle="Untitled";
    private String title=defaultTitle;
    File Filename2;
    Clipboard clip = getToolkit().getSystemClipboard();
    private String clipboard;
    private FixedStack<String> prev;
    private final int undomoves=10;
    private int start,end;
    public String findText;
    public String replaceText;
    public Color textColor;
    private final FontSelect fontdialog;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem itemAbout;
    private javax.swing.JMenuItem itemCopy;
    private javax.swing.JMenuItem itemCut;
    private javax.swing.JMenuItem itemDelete;
    private javax.swing.JMenuItem itemExit;
    private javax.swing.JMenuItem itemFind;
    private javax.swing.JMenuItem itemFindNext;
    private javax.swing.JMenuItem itemFont;
    private javax.swing.JMenuItem itemGoto;
    private javax.swing.JMenuItem itemNew;
    private javax.swing.JMenuItem itemNewWindow;
    private javax.swing.JMenuItem itemOpen;
    private javax.swing.JMenuItem itemPaste;
    private javax.swing.JMenuItem itemReplace;
    private javax.swing.JMenuItem itemSave;
    private javax.swing.JMenuItem itemSaveAs;
    private javax.swing.JMenuItem itemSelectAll;
    private javax.swing.JMenuItem itemTime;
    private javax.swing.JMenuItem itemUndo;
    private javax.swing.JMenuItem itemViewHelp;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuFormat;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenu menuView;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}

class FixedStack<T> extends Stack<T> {
    private final int maxSize;
    public FixedStack(int size) {
        super();
        this.maxSize=size;
    }
    @Override
    public T push(T object) {
        while (this.size()>=maxSize) {
            this.remove(0);
        }
        return super.push(object);
    }
}